package data

// AUTOGENERATED BY MOQ
// github.com/matryer/moq

// UserStoreMock is a mock implementation of UserStore.
//
//     func TestSomethingThatUsesUserStore(t *testing.T) {
//
//         // make and configure a mocked UserStore
//         mockedUserStore := &UserStoreMock{ 
//             CreateFunc: func(user *UserData) error {
// 	               panic("TODO: mock out the Create function")
//             },
//             DeleteFunc: func(id int) error {
// 	               panic("TODO: mock out the Delete function")
//             },
//             ExistsFunc: func(id int) (bool, error) {
// 	               panic("TODO: mock out the Exists function")
//             },
//             GetFunc: func(id int) (*UserData, error) {
// 	               panic("TODO: mock out the Get function")
//             },
//             GetByEmailFunc: func(email string) (*UserData, error) {
// 	               panic("TODO: mock out the GetByEmail function")
//             },
//             ListFunc: func() ([]*UserData, error) {
// 	               panic("TODO: mock out the List function")
//             },
//         }
//
//         // TODO: use mockedUserStore in code that requires UserStore
//     
//     }
type UserStoreMock struct {
	// CreateFunc mocks the Create function.
	CreateFunc func(user *UserData) error
	// DeleteFunc mocks the Delete function.
	DeleteFunc func(id int) error
	// ExistsFunc mocks the Exists function.
	ExistsFunc func(id int) (bool, error)
	// GetFunc mocks the Get function.
	GetFunc func(id int) (*UserData, error)
	// GetByEmailFunc mocks the GetByEmail function.
	GetByEmailFunc func(email string) (*UserData, error)
	// ListFunc mocks the List function.
	ListFunc func() ([]*UserData, error)
}

// Create calls CreateFunc.
func (mock *UserStoreMock) Create(user *UserData) error {
	if mock.CreateFunc == nil {
		panic("moq: UserStoreMock.CreateFunc is nil but was just called")
	}
	
	return mock.CreateFunc(user)
	
}

// Delete calls DeleteFunc.
func (mock *UserStoreMock) Delete(id int) error {
	if mock.DeleteFunc == nil {
		panic("moq: UserStoreMock.DeleteFunc is nil but was just called")
	}
	
	return mock.DeleteFunc(id)
	
}

// Exists calls ExistsFunc.
func (mock *UserStoreMock) Exists(id int) (bool, error) {
	if mock.ExistsFunc == nil {
		panic("moq: UserStoreMock.ExistsFunc is nil but was just called")
	}
	
	return mock.ExistsFunc(id)
	
}

// Get calls GetFunc.
func (mock *UserStoreMock) Get(id int) (*UserData, error) {
	if mock.GetFunc == nil {
		panic("moq: UserStoreMock.GetFunc is nil but was just called")
	}
	
	return mock.GetFunc(id)
	
}

// GetByEmail calls GetByEmailFunc.
func (mock *UserStoreMock) GetByEmail(email string) (*UserData, error) {
	if mock.GetByEmailFunc == nil {
		panic("moq: UserStoreMock.GetByEmailFunc is nil but was just called")
	}
	
	return mock.GetByEmailFunc(email)
	
}

// List calls ListFunc.
func (mock *UserStoreMock) List() ([]*UserData, error) {
	if mock.ListFunc == nil {
		panic("moq: UserStoreMock.ListFunc is nil but was just called")
	}
	
	return mock.ListFunc()
	
}
